@page "/meal/{MealId:int}"

@using DataAccessLibrary.MealRepositories
@using DataAccessLibrary.Models
@using DataAccessLibrary.ViewModels 

@inject MealRepositories mealRepositories

@if (meal == null || mealArea == null || mealCategory == null || ingredients == null)
{
    <div class="d-flex align-items-center">
        <strong>Loading...</strong>
        <div class="spinner-border ms-auto" role="status" aria-hidden="true"></div>
    </div>
}
else
{
    <div class="container">
        <div class="row">
            <div class="col">
                <h2>
                    @meal.Name
                </h2>
                <p class="h5">Area: @mealArea.Name</p>
                <p class="h5">Category: @mealCategory.Name</p>
            </div>
            <div class="col">
                <img src="@meal.ThumbnailUrl" class="img-fluid rounded" alt="Image of @meal.Name" />
            </div>
        </div>
    </div>
    <div class="container">
        <h4>Ingredients:</h4>
        <ul class="list-group my-2">

            @foreach (var ingredient in ingredients)
            {
                <li class="list-group-item">@ingredient.Measure of @ingredient.Name</li>
            }
        </ul>
        <div class="my-2">

            <h4>Recipe:</h4>
            <p>@meal.Recipe</p>
        </div>
    </div>
}


@code {
    [Parameter]
    public int? MealId { get; set; }

    protected MealModel meal;
    protected AreaModel mealArea;
    protected CategoryModel mealCategory;
    protected List<MealIngredientModel> ingredients;



    protected override async Task OnInitializedAsync()
    {
        meal = await mealRepositories.MealRepository.GetMealById(MealId.Value);
        ingredients = await mealRepositories.MealRepository.GetMealIngredientsById(MealId.Value);
        mealArea = await mealRepositories.AreaRepository.GetAreaById(meal.AreaId);
        mealCategory = await mealRepositories.CategoryRepository.GetCategoryById(meal.CategoryId);
    }
}
