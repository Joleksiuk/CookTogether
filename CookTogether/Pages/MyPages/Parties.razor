@page "/parties/{text}"

@using DataAccessLibrary
@using DataAccessLibrary.Models
@using CookTogether.Models
@using DataAccessLibrary.ViewModels
@using DataAccessLibrary.MealRepositories
@using CookTogether.Data 

@inject ICategoryRepository CategoryRepository
@inject IAreaRepository AreaRepository
@inject IPartyRepository PartyRepository
@inject IUserRepository UserRepository
@inject Blazored.Localisation.Services.IBrowserDateTimeProvider browserDateTimeProvider
@inject NavigationManager NavManager
@inject PartyService PartyService 

@attribute [Authorize]
<h1>Parties</h1>
<hr />
<h3>Create new Party</h3>
@if (categories == null || areas == null || userParties == null ||pendingInvites==null)
{
    <div class="spinner-border" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
    
}
else
{
    <div> 
        <EditForm Model="@party" OnValidSubmit="@InsertParty">
            <br />
            <div>
                <label>Party Name :       </label>
                <InputText @bind-Value="@party.PartyName" placeholder="party name..." />
            </div>
            <br />
            <br />
            <div style="display:grid; grid-template-columns:3fr 1fr 3fr;">
                <div>
                    <h3>Categories choice: </h3>
                    <div style="display: grid; grid-template-columns: 1fr 1fr 1fr; ">
                        @foreach (var category in categories)
                        {
                            <div class="selector">
                                <input type="checkbox" @onchange="eventArgs => { CategoryCheckboxClicked(category, eventArgs.Value); }" />
                                <span>@category.Name</span>
                            </div>
                        }
                    </div>
                </div>
                <div><br /></div>
                <div>
                    <h3>Origin area choice: </h3>
                    <div style="display: grid; grid-template-columns: 1fr 1fr 1fr; ">

                        @foreach (var area in areas)
                        {
                            <div class="selector">
                                <input type="checkbox" @onchange="eventArgs => { AreaCheckboxClicked(area, eventArgs.Value); }" />
                                <span>@area.Name</span>
                            </div>
                        }
                    </div>
                </div>
            </div>
            <button type="submit" class="btn btn-primary">Create Party</button>
</EditForm>
        <br />
        <hr />
    </div>
    <div>
        <h2>Parties you are currently in</h2>
        <table class="table table-striped">
            <tbody>
                @foreach (var party in userParties)
                {
                    <tr>                       
                        <td>@party.PartyName</td>
                        <td> <button  type="button" class="btn btn-primary"@onclick="() => GoToParty(party.Id)">Go to Party Room</button></td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div>
        <h2>Pending invites</h2>
        <table class="table table-striped">
            <tbody>
                @foreach (var invite in displayPendingInvites)
                {
                <tr>
                    <td>@invite.PartyName</td>
                    <td> <button type="button" class="btn btn-success" @onclick="() => AcceptInvitation(loggedUser, invite.PartyId)">Accept</button></td>
                    <td> <button type="button" class="btn btn-danger" @onclick="() => DeclineInvitation(loggedUser,invite.PartyId)">Decline</button></td>
                </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {

    [Parameter]
    public string? Text { get; set; }

    string currentLocalTime = "";

    PartyModel party { get; set; }
    List<CategoryModel> categories;
    List<AreaModel> areas;
    List<PartyModel> userParties;
    List<PartyUserInviteModel> pendingInvites;
    List<DisplayPartyInviteModel> displayPendingInvites;

    [CascadingParameter]
    private Task<AuthenticationState> authStateTask { get; set; }
    private AuthenticationState authenticationState;
    private string loggedUserID;

    int categoryId;
    int AreaId;

    string roomName;
    UserModel loggedUser;

    protected override async Task OnInitializedAsync()
    {
        party = new PartyModel();

        authenticationState = await authStateTask;
        loggedUserID = authenticationState.User.Claims.FirstOrDefault().Value;
        loggedUser = await UserRepository.GetUserById(loggedUserID);

        categories = await CategoryRepository.GetCategories();
        areas = await AreaRepository.GetAreas();
        userParties = await PartyRepository.GetUserParties(loggedUser);
        pendingInvites = await PartyRepository.GetUserPendingInvites(loggedUser);
        displayPendingInvites = await PartyRepository.GetUserPendingDisplayInvites(loggedUser);

        await InvokeAsync(() => StateHasChanged());
    }

    private async Task InsertParty()
    {

        var browserDateTime = await browserDateTimeProvider.GetInstance();
        currentLocalTime = browserDateTime.Now.ToString();
        System.DateTime currentDate = DateTime.Parse(currentLocalTime);

        PartyModel partyModel = new PartyModel
        {
            CreationDate = currentDate,
            OwnerUserId = loggedUserID,
            PartyName = party.PartyName
        };

        await PartyRepository.InsertParty(partyModel);
        PartyModel newPartyModel = await PartyRepository.GetLatestUserParty(loggedUserID);

        await PartyRepository.InsertPartyUser(loggedUser, newPartyModel);

        foreach(CategoryModel category in ChosenCategories)
        {
            await PartyRepository.InsertCategoryForParty(category, newPartyModel);
        }

        foreach(AreaModel area in ChosenAreas)
        {
            await PartyRepository.InsertAreaForParty(area, newPartyModel);
        }

        NavManager.NavigateTo("/party-room/" + (newPartyModel.Id).ToString());
    }

    private async Task AcceptInvitation(UserModel user, int partyId)
    {
        PartyUserInviteModel invitation = await PartyRepository.GetInviteByIds(user.Id, partyId);
        PartyModel party = await PartyRepository.GetPartyById(partyId.ToString());
        PartyService.AddUserToParty(user, party);
        PartyService.CancelUserInvitationToParty(user, party);
        pendingInvites.Remove(invitation);
        displayPendingInvites.Remove(displayPendingInvites.Find((pendingInvite) => pendingInvite.InvitedUserId == user.Id && pendingInvite.PartyId == partyId));
        userParties.Add(party);
    }

    public async Task DeclineInvitation(UserModel user, int partyId)
    {
        PartyUserInviteModel invitation = await PartyRepository.GetInviteByIds(user.Id, partyId);
        PartyModel party = await PartyRepository.GetPartyById(partyId.ToString());
        PartyService.CancelUserInvitationToParty(user, party);
        pendingInvites.Remove(invitation);
        displayPendingInvites.Remove(displayPendingInvites.Find((pendingInvite) => pendingInvite.InvitedUserId == user.Id && pendingInvite.PartyId == partyId));
    }

    private void GoToParty(int partyID)
    {
        NavManager.NavigateTo("/party-room/" + partyID.ToString());
    }

    public List<CategoryModel> ChosenCategories = new();
    public List<AreaModel> ChosenAreas = new();

    void CategoryCheckboxClicked(CategoryModel category, object checkedValue)
    {
        if ((bool)checkedValue)
        {
            ChosenCategories.Add(category);
        }
        else
        {
            ChosenCategories.Remove(category);
        }
    }

    void AreaCheckboxClicked(AreaModel area, object checkedValue)
    {
        if ((bool)checkedValue)
        {
            ChosenAreas.Add(area);
        }
        else
        {
            ChosenAreas.Remove(area);
        }

    }

}

