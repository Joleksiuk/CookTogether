@page "/friends"

@using DataAccessLibrary
@using DataAccessLibrary.Models
@using CookTogether.Models
@using CookTogether.Models.Display

@inject IUserRepository UserRepository
@inject IFriendshipsRepository FriendshipRepository
@attribute [Authorize]

@if (friendableUsers == null || friendlist == null || invitingUsers == null || invitedUsers == null)
{
    <p>Loading data...</p>
}
else
{
    <h2>Friends</h2>
    @if (friendlist.Any())
    {
        <h4>Your Friendlist</h4>
        <table class="table table-striped">
            <thread>
                <tr>
                    <th scope="col">Friend name</th>
                    <th scope="col"></th>
                </tr>
            </thread>
            <tbody>
                @foreach (var friend in friendlist)
                {
                    <tr>
                        <td>@friend.UserName</td>
                        <td> <button class="btn btn-danger" @onclick="() => removeFriend(friend)">Remove friend</button></td>
                    </tr>
                }
            </tbody>
        </table>
    }


    @if (invitingUsers.Any())
    {
        <h4>Received friend invites</h4>
        <table class="table table-striped">
            <thread>
                <tr>
                    <th scope="col">Username</th>
                    <th scope="col"></th>
                </tr>
            </thread>
            <tbody>
                @foreach (var user in invitingUsers)
                {
                    <tr>
                        <td>@user.UserName</td>
                        <td> <button class="btn btn-success" @onclick="() => acceptInvite(user)">Accept invite</button></td>
                        <td> <button class="btn btn-danger" @onclick="() => ignoreInvite(user)">Ignore invite</button></td>
                    </tr>
                }
            </tbody>
        </table>
    }

    @if (invitedUsers.Any())
    {
        <h4>Sent friend invites</h4>
        <table class="table table-striped">
            <thread>
                <tr>
                    <th scope="col">Username</th>
                    <th scope="col"></th>
                </tr>
            </thread>
            <tbody>
                @foreach (var user in invitedUsers)
                {
                    <tr>
                        <td>@user.UserName</td>
                        <td> <button class="btn btn-dark" @onclick="() => cancelInvite(user)">Cancel invitation</button></td>
                    </tr>
                }
            </tbody>
        </table>
    }

    <div>
        <h4>Available users</h4>
        <EditForm Model="@userSearchModel" OnValidSubmit="@handleSearchSubmit">
            <div class="row my-2">
                <div class="col">
                    <InputText id="search" placeholder="Username" class="form-control" @bind-Value="userSearchModel.UserName"></InputText>
                </div>
                <div class="col">
                    <button type="submit" class="btn btn-secondary">Search</button>
                </div>
            </div>
        </EditForm>

        <table class="table table-striped">
            <thread>
                <tr>
                    <th scope="col"></th>
                    <th scope="col"></th>
                </tr>
            </thread>
            <tbody>
                @foreach (var user in friendableUsers)
                {
                    <tr>
                        <td>@user.UserName</td>
                        <td> <button class="btn btn-primary" @onclick="() => sendInvite(user)">Invite friend</button></td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}


@code {

    private UserSearchModel userSearchModel = new UserSearchModel();

    //Currently logged user identity
    [CascadingParameter]
    private Task<AuthenticationState> authStateTask { get; set; }
    private AuthenticationState authenticationState;
    private string loggedUserID;
    private UserModel loggedUser;

    //USERS
    private List<UserModel> users;
    private List<UserModel> friendableUsers;
    private List<UserModel> invitingUsers;
    private List<UserModel> invitedUsers;


    //FRIENDSHIPS
    private List<UserModel> friendlist;


    protected override async Task OnInitializedAsync()
    {
        users = await UserRepository.GetUsers();
        authenticationState = await authStateTask;



        loggedUserID = authenticationState.User.Claims.FirstOrDefault().Value;
        loggedUser = await UserRepository.GetUserById(loggedUserID);
        friendlist = await FriendshipRepository.GetFriendListOfUser(loggedUserID);
        friendableUsers = await FriendshipRepository.GetNotFriendedAndNotInvitedListOfUser(loggedUserID);
        invitingUsers = await FriendshipRepository.GetInvitingUsersByInvitedUserId(loggedUserID);
        invitedUsers = await FriendshipRepository.GetInvitedUsersByInvitingUserId(loggedUserID);
        await InvokeAsync(() => StateHasChanged());
    }

    private async Task addFriend(UserModel friend)
    {
        FriendshipModel friendshipModel = new FriendshipModel
        {
            FirstUserId = friend.Id,
            SecondUserId = loggedUserID
        };

        await FriendshipRepository.InsertFriendship(friendshipModel);
        friendlist.Add(friend);
        friendableUsers.Remove(friend);
    }

    private async Task removeFriend(UserModel friend)
    {
        friendlist.Remove(friend);
        friendableUsers.Add(friend);
        await FriendshipRepository.RemoveFriendship(friend, loggedUser);
    }

    private async Task acceptInvite(UserModel user)
    {
        invitingUsers.Remove(user);
        await addFriend(user);
        await FriendshipRepository.RemoveFriendInvite(new FriendInviteModel
        {
            InvitedUserId = loggedUserID,
            InvitingUserId = user.Id
        });

    }

    private async Task ignoreInvite(UserModel user)
    {
        invitingUsers.Remove(user);
        await FriendshipRepository.RemoveFriendInvite(new FriendInviteModel
        {
            InvitedUserId = loggedUserID,
            InvitingUserId = user.Id
        });
    }

    private async Task sendInvite(UserModel user)
    {
        friendableUsers.Remove(user);
        invitedUsers.Add(user);
        await FriendshipRepository.InsertFriendInvite(new FriendInviteModel
        {
            InvitingUserId = loggedUserID,
            InvitedUserId = user.Id
        });
    }

    private async Task cancelInvite(UserModel user)
    {
        invitedUsers.Remove(user);
        await FriendshipRepository.RemoveFriendInvite(new FriendInviteModel
        {
            InvitingUserId = loggedUserID,
            InvitedUserId = user.Id
        });
    }

    private async void handleSearchSubmit()
    {
        friendableUsers = await FriendshipRepository.GetNotFriendedAndNotInvitedListOfUser(loggedUserID, userSearchModel.UserName);
        await InvokeAsync(StateHasChanged);
    }
}
