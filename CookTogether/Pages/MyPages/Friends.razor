@page "/friends"

@using DataAccessLibrary
@using DataAccessLibrary.Models
@using CookTogether.Models

@inject IUserRepository UserRepository
@inject IFriendshipsRepository FriendshipRepository
@attribute [Authorize]

@if (friendableUsers == null || friendships == null || friendlist == null)
{
    <p>Loading data...</p>
}
else
{
    <h2>Friends</h2>
    @if (friendlist.Any())
    {
        <h4>Your Friendlist</h4>
        <table class="table table-striped">
            <thread>
                <tr>
                    <th>Friend name</th>
                    <th></th>
                </tr>
            </thread>
            <tbody>
                @foreach (var friend in friendlist)
                {
                    <tr>
                        <td>@friend.UserName</td>
                        <td> <button class="btn btn-danger" @onclick="() => removeFriend(friend)">Remove friend</button></td>
                    </tr>
                }
            </tbody>
        </table>
    }

    <h4>Available Users</h4>
    <table class="table table-striped">
        <thread>
            <tr>
                <th>Username</th>
                <th></th>
            </tr>
        </thread>
        <tbody>
            @foreach (var user in friendableUsers)
            {
                <tr>
                    <td>@user.UserName</td>
                    <td> <button class="btn btn-primary" @onclick="() => addFriend(user)">Add friend</button></td>
                </tr>
            }
        </tbody>
    </table>



}


@code {

    //Currently logged user identity
    [CascadingParameter]
    private Task<AuthenticationState> authStateTask { get; set; }
    private AuthenticationState authenticationState;
    private string clickedUser = "";
    private string loggedUserID;
    private UserModel loggedUser;

    //USERS
    private List<UserModel> users;
    private List<UserModel> friendableUsers;
    private DisplayUserModel newUser = new DisplayUserModel();


    //FRIENDSHIPS
    private List<FriendshipModel> friendships;
    private List<UserModel> friendlist;


    protected override async Task OnInitializedAsync()
    {
        users = await UserRepository.GetUsers();
        friendships = await FriendshipRepository.GetFriendships();
        authenticationState = await authStateTask;

        loggedUserID = authenticationState.User.Claims.FirstOrDefault().Value;
        loggedUser = await UserRepository.GetUserById(loggedUserID);
        friendlist = await FriendshipRepository.GetFriendListOfUser(loggedUserID);
        friendableUsers = await FriendshipRepository.GetNOTFriendedListOfUser(loggedUserID);

    }

    private void addFriend(UserModel friend)
    {
        clickedUser = friend.Id;
        FriendshipModel friendshipModel = new FriendshipModel
        {
            FirstUserId = friend.Id,
            SecondUserId = loggedUserID
        };

        FriendshipRepository.InsertFriendship(friendshipModel);
        friendships.Add(friendshipModel);
        friendlist.Add(friend);
        friendableUsers.Remove(friend);
    }


    private void removeFriendshipFromList(UserModel friend1, UserModel friend2)
    {
        foreach (var friendship in friendships)
        {
            if (friendship.FirstUserId == friend1.Id && friendship.SecondUserId == friend2.Id)
            {
                friendships.Remove(friendship);
                break;
            }
            else if (friendship.SecondUserId == friend1.Id && friendship.FirstUserId == friend2.Id)
            {
                friendships.Remove(friendship);
                break;
            }

        }
    }

    private void removeFriend(UserModel friend)
    {
        clickedUser = friend.Id;
        removeFriendshipFromList(friend, loggedUser);
        friendlist.Remove(friend);
        friendableUsers.Add(friend);
        FriendshipRepository.RemoveFriendship(friend, loggedUser);
    }

}
