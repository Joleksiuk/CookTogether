@page "/party-room/{RoomId:int}/result-board"

@using DataAccessLibrary.MealRepositories
@using DataAccessLibrary.Models
@using DataAccessLibrary.ViewModels

@using CookTogether.Pages.Components

@inject MealRepositories MealRepositories
@inject IMealRepository MealRepository

<style>
    .top-1 {
        background-color: gold;
        color: #665a00;
    }

    .top-2 {
        background-color: silver;
        color: #4e4e4e;
    }

    .top-3 {
        background-color: saddlebrown;
        color: #f5cca3;
    }
</style>


<PageTitle Text="Party results" WithButtonGrid="true">
    <RefreshButton onclick="@LoadData"/>
</PageTitle>

@if (Meals == null)
{
    <LoadingSpinner></LoadingSpinner>
}
else
{
    <div class="row d-flex card-group mb-2">
        @foreach(var (meal, i) in topMeals.Select((meal, i) => (meal, i + 1)))
        {
            <div class="col d-flex mb-3">
                <MealCardSmall Meal="meal">
                    <h2> <span class="badge w-100 top-@i">#@i</span></h2>
                </MealCardSmall>
            </div>
         }
    </div>
    <table class="table">
        <thead>
            <tr>
                <th scope="col" colspan="1"># </th>
                <th scope="col" colspan="1">Image</th>
                <th scope="col" colspan="1">Name</th>
                <th scope="col" colspan="3">Result</th>
                <th scope="col" colspan="1">Votes</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var (meal, i) in Meals.Select((meal, i) => (meal, i + 1)))
            {
                <tr>
                    <th scope="row" class="table-active"> @i </th>
                    <td>
                        <a href="/Meal/@meal.Id">
                             <img src="@meal.ThumbnailUrl" width="60%" height="60%" class="img-fluid" alt="Responsive image">
                        </a>
                    </td>
                    <td colspan="1">
                        <a href="/Meal/@meal.Id">@meal.Name</a>
                    </td>
                    <td style="width: 50%;" colspan="3">
                        <div class="progress">
                            <div class="progress-bar" role="progressbar" style="width:@(Math.Ceiling((((float)meal.VoteNumber/(float)meal.NumberUsersVoted)*100)))%;)"
                                 aria-valuenow="@(Math.Ceiling((((float)meal.VoteNumber/(float)meal.NumberUsersVoted)*100)))%" aria-valuemin="0" aria-valuemax="100">@(Math.Ceiling((((float)meal.VoteNumber/(float)meal.NumberUsersVoted)*100)))%</div>
                        </div>
                    </td>
                    <td colspan="1"> @meal.NumberUsersVoted </td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    [Parameter]
    public int? RoomId { get; set; }

    private List<MealVotesModel> Meals;
    protected int PartyUserNumber;

    private List<MealModel> topMeals;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        await InvokeAsync(() => StateHasChanged());
    }

    protected async Task LoadData()
    {
        Meals = await MealRepository.GetPartyMealsWithVotingResult(RoomId.Value);
        topMeals = GetTopThreeMeals(Meals);
    }

    protected List<MealModel> GetTopThreeMeals(List<MealVotesModel> votes)
    {
        List<MealModel> meals = new();
        foreach(var vote in votes.Take(3))
        {
            meals.Add(new MealModel
            {
                Id = vote.Id,
                Name = vote.Name,
                ThumbnailUrl = vote.ThumbnailUrl,
                CategoryId = vote.CategoryId,
                AreaId = vote.AreaId
            });
        }
        return meals;
    }

}
