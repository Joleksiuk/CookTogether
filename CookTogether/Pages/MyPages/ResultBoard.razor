@page "/party-room/{RoomId:int}/result-board"

@using DataAccessLibrary.MealRepositories
@using DataAccessLibrary.Models
@using DataAccessLibrary.ViewModels

@inject MealRepositories MealRepositories
@inject IMealRepository MealRepository

<h3>ResultBoard</h3>
<hr />

@if (Meals == null)
{
    <div class="d-flex align-items-center">
        <strong></strong>
        <div class="spinner-border ms-auto" role="status" aria-hidden="true"></div>
    </div>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th scope="col" colspan="1">Nb </th>
                <th scope="col" colspan="1">Image</th>
                <th scope="col" colspan="1">Name</th>
                <th scope="col" colspan="3">Result</th>
                <th scope="col" colspan="1">Votes</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var (meal, i) in Meals.Select((meal, i) => (meal, i + 1)))
            {
                <tr>
                    <th scope="row" class="table-active"> @i </th>
                    <td>
                        <a href="/Meal/@meal.Id">
                             <img src="@meal.ThumbnailUrl" width="60%" height="60%" class="img-fluid" alt="Responsive image">
                        </a>
                    </td>
                    <td colspan="1">
                        <a href="/Meal/@meal.Id">@meal.Name</a>
                    </td>
                    <td style="width: 50%;" colspan="3">
                        <div class="progress">
                            <div class="progress-bar" role="progressbar" style="width:@((((float)meal.VoteNumber/(float)meal.NumberUsersVoted)*100))%;)"
                                 aria-valuenow="25" aria-valuemin="0" aria-valuemax="100">@((((float)meal.VoteNumber/(float)meal.NumberUsersVoted)*100))%</div>
                        </div>
                    </td>
                    <td colspan="1"> @meal.NumberUsersVoted </td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    [Parameter]
    public int? RoomId { get; set; }

    private List<MealVotesModel> Meals;
    protected int PartyUserNumber;

    protected override async Task OnInitializedAsync()
    {
        Meals = await MealRepository.GetPartyMealsWithVotingResult(RoomId.Value);
        await InvokeAsync(() => StateHasChanged());
    }

}
