@page "/party-room/{RoomId:int}/MealPicker/"

@using CookTogether.Data
@using DataAccessLibrary
@using DataAccessLibrary.Models
@using DataAccessLibrary.MealRepositories

@inject MealRepositories mealRepositories
@inject PartyService partyService
@inject NavigationManager navigationManager

@attribute [Authorize]



@if (partyMeals == null || currentMeal == null)
{
    <div class="d-flex align-items-center">
        <strong>Loading...</strong>
        <div class="spinner-border ms-auto" role="status" aria-hidden="true"></div>
    </div>
}
else
{
    <h2>Would you like to try that meal?</h2>
    <div>
        <div class="col">
            <h4>@currentMeal.Name</h4>
            <div class="row d-flex justify-content-center">
                <img src="@currentMeal.ThumbnailUrl" class="img-fluid" />
            </div>
            <div class="row d-flex justify-content-center my-2">
                <button class="btn btn-success mx-2" @onclick="AcceptMeal">Yes</button>
                <button class="btn btn-danger mx-2" @onclick="RejectMeal">No</button>
            </div>
        </div>
    </div>

}

@code {
    [Parameter]
    public int? RoomId { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authStateTask { get; set; }

    List<MealModel> partyMeals;

    MealModel currentMeal;
    string userId;

    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await authStateTask;
        userId = authenticationState.User.Claims.FirstOrDefault().Value;

        partyMeals = await partyService.GetPartyMealsForUser(RoomId.Value, userId);
        NextMealOrRedirect();
    }

    protected async Task AcceptMeal()
    {
        await MakeChoice(true);
    }

    protected async Task RejectMeal()
    {
        await MakeChoice(false);
    }

    protected async Task MakeChoice(bool choice)
    {
        int mealId = currentMeal.Id;

        await partyService.SaveChoice(RoomId.Value, userId, mealId, choice);
        NextMealOrRedirect();

    }

    protected void NextMealOrRedirect()
    {
        if (!NextMeal())
        {
            navigationManager.NavigateTo($"/party-room/{RoomId.Value}/result-board");
        }
    }

    private bool NextMeal()
    {

        if (partyMeals.FirstOrDefault() == default)
        {
            return false;
        }
        currentMeal = partyMeals.First();
        partyMeals.Remove(currentMeal);
        StateHasChanged();
        return true;
    }
}
