@page "/party-room/{RoomId:int}/MealPicker/"

@using DataAccessLibrary
@using DataAccessLibrary.Models
@using DataAccessLibrary.MealRepositories
@using CookTogether.Pages.Components

@inject MealRepositories mealRepositories
@inject IPartyRepository partyRepository

@attribute [Authorize]


<PageTitle Text="Meal picker" />
@if (isLoading)
{
    <LoadingSpinner></LoadingSpinner>
}
else
{
    <MealCard MealId="@currentMeal.Id">
        <p>Would you like to try that meal?</p>
        <ButtonGrid JustifyContent="@buttonJustifyType">
            <button class="btn btn-success" @onclick="AcceptMeal">Yes</button>
            <button class="btn btn-danger" @onclick="RejectMeal">No</button>
        </ButtonGrid>
    </MealCard>
}




@code {
    [Parameter]
    public int? RoomId { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authStateTask { get; set; }

    List<MealModel> partyMeals;

    MealModel currentMeal;
    List<PartyMealChoiceModel> userChoices;
    string userId;

    bool isLoading = true;

    JustifyContentType buttonJustifyType = JustifyContentType.Center;

    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await authStateTask;
        userId = authenticationState.User.Claims.FirstOrDefault().Value;

        partyMeals = await partyRepository.GetPartyMealsById(RoomId.Value);
        userChoices = await partyRepository.GetUserPartyChoices(RoomId.Value, userId);
        NextMeal();
        isLoading = false;
    }

    private bool NextMeal()
    {

        if (partyMeals.FirstOrDefault() == default)
        {
            return false;
        }
        currentMeal = partyMeals.First();
        partyMeals.Remove(currentMeal);
        StateHasChanged();
        return true;
    }

    protected void AcceptMeal()
    {
        NextMeal();
    }

    protected void RejectMeal()
    {
        NextMeal();
    }
}
