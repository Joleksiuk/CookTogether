@page "/party-room/{RoomId:int}/MealPicker/"

@using CookTogether.Data
@using DataAccessLibrary
@using DataAccessLibrary.Models
@using DataAccessLibrary.MealRepositories
@using CookTogether.Pages.Components

@inject MealRepositories mealRepositories
@inject PartyService partyService
@inject NavigationManager navigationManager

@attribute [Authorize]



<PageTitle Text="Meal picker" />
@if (isLoading)
{
    <LoadingSpinner></LoadingSpinner>
}
else
{
    <MealCard MealId="@currentMeal.Id">
        <p>Would you like to try that meal?</p>
        <ButtonGrid JustifyContent="@buttonJustifyType">
            <button class="btn btn-success" @onclick="AcceptMeal">Yes</button>
            <button class="btn btn-danger" @onclick="RejectMeal">No</button>
        </ButtonGrid>
    </MealCard>
}

@code {
    [Parameter]
    public int? RoomId { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authStateTask { get; set; }

    List<MealModel> partyMeals;

    MealModel currentMeal;
    string userId;

    bool isLoading = true;

    JustifyContentType buttonJustifyType = JustifyContentType.Center;

    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await authStateTask;
        userId = authenticationState.User.Claims.FirstOrDefault().Value;
      
        partyMeals = await partyService.GetPartyMealsForUser(RoomId.Value, userId);
        NextMealOrRedirect();
        isLoading = false;
    }

    protected async Task AcceptMeal()
    {
        await MakeChoice(true);
    }

    protected async Task RejectMeal()
    {
        await MakeChoice(false);
    }

    protected async Task MakeChoice(bool choice)
    {
        int mealId = currentMeal.Id;

        await partyService.SaveChoice(RoomId.Value, userId, mealId, choice);
        NextMealOrRedirect();

    }

    protected void NextMealOrRedirect()
    {
        if (!NextMeal())
        {
            navigationManager.NavigateTo($"/party-room/{RoomId.Value}/result-board");
        }
    }

    private bool NextMeal()
    {

        if (partyMeals.FirstOrDefault() == default)
        {
            return false;
        }
        currentMeal = partyMeals.First();
        partyMeals.Remove(currentMeal);
        StateHasChanged();
        return true;
    }
}
