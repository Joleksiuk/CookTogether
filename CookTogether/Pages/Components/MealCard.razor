@using DataAccessLibrary.Models
@using DataAccessLibrary.MealRepositories

@inject MealRepositories MealRepositories 

<div class="card">
    @if (isLoading)
    {
        <LoadingSpinner></LoadingSpinner>
    }
    else if(Meal!=null)
    {
        <div class="card-header">
            <h1 class="card-title">@Meal.Name</h1>
        </div>
        <div class="row">
            <div class="col d-flex flex-column">
                <div class="card-body d-flex flex-column align-self-stretch">
                    <div class="my-auto">
                        <p class="h2 font-weight-light mb-3">Category: <span class="badge badge-secondary">@category.Name</span></p>
                        <p class="h2 font-weight-light">Area: <span class="badge badge-secondary">@area.Name</span></p>
                    </div>
                    @if(ChildContent != null)
                    { 
                        <div class="my-auto">
                            @ChildContent
                        </div>
                    }
                </div>
            </div>
            <div class="col">
                <img src="@Meal.ThumbnailUrl" class="card-img-bottom img-fluid rounded" alt="Image of @Meal.Name" />
            </div>
        </div>
    }

</div>

@code {
    [Parameter]
    public MealModel Meal { set; get; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    private AreaModel area;
    private CategoryModel category;
    private bool isLoading = true;

    protected override async Task OnParametersSetAsync()
    {
        if(Meal!=null)
        {
            isLoading = true;
            area = await MealRepositories.AreaRepository.GetAreaById(Meal.AreaId);
            category = await MealRepositories.CategoryRepository.GetCategoryById(Meal.CategoryId);

        }
        isLoading = false;

        await base.OnParametersSetAsync();
    }

}
