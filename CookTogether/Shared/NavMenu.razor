@inject IJSRuntime JsRuntime


   <div class="top-row pl-4 navbar navbar-dark">
        <button class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>

    <div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
        <ul class="nav flex-column">
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="" Match="NavLinkMatch.All" id="nav-option">
                    <span class="oi oi-home" aria-hidden="true"></span><span class="navtext"> Home</span>
                </NavLink>
            </li>
            @if (user.Identity.IsAuthenticated)
            {
                <li class="nav-item px-3">
                    <NavLink class="nav-link" href="friends" id="nav-option">
                        <span class="oi oi-people" aria-hidden="true"></span> <span class="navtext">Friends</span>
                    </NavLink>
                </li>

                <li class="nav-item px-3">
                    <NavLink class="nav-link" href="parties/all" id="nav-option">
                        <span class="oi oi-heart" aria-hidden="true"></span><span class="navtext"> Parties</span>
                    </NavLink>
                </li>
                @if (user.IsInRole("Admin"))
                {
                    <li class="nav-item px-3">
                        <NavLink class="nav-link" href="admin" id="nav-option">
                            <span class="oi oi-list-rich" aria-hidden="true"></span> <span class="navtext">Admin</span>
                        </NavLink>
                    </li>
                }
            }
        </ul>
    </div>


@code {
    private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    protected System.Security.Claims.ClaimsPrincipal user;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    [CascadingParameter] protected Task<AuthenticationState> AuthState { get; set; }

    protected async override Task OnInitializedAsync()
    {
        base.OnInitialized();
        user = (await AuthState).User;
    }


    public int Height { get; set; }
    public int Width { get; set; }

    private async Task InitializeDimentions()
    {
        var dimension = await JsRuntime.InvokeAsync<WindowDimension>("getWindowDimensions");
        Height = dimension.Height;
        Width = dimension.Width;
    }

    public class WindowDimension
    {
        public int Width { get; set; }
        public int Height { get; set; }
    }
}
